// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package codec

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	"reflect"
	"runtime"
)

const (
	// ----- content types ----
	codecSelferC_UTF87316 = 1
	codecSelferC_RAW7316  = 0
	// ----- value types used ----
	codecSelferValueTypeArray7316 = 10
	codecSelferValueTypeMap7316   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey7316    = 2
	codecSelfer_containerMapValue7316  = 3
	codecSelfer_containerMapEnd7316    = 4
	codecSelfer_containerArrayElem7316 = 6
	codecSelfer_containerArrayEnd7316  = 7
)

var (
	codecSelferBitsize7316                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr7316 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer7316 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
	}
}

func (x *CodecFullStat) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7316)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.Time))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey7316)
				r.EncodeString(codecSelferC_UTF87316, string("t"))
				z.EncSendContainerState(codecSelfer_containerMapValue7316)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.Time))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7316)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeFloat64(float64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey7316)
				r.EncodeString(codecSelferC_UTF87316, string("n"))
				z.EncSendContainerState(codecSelfer_containerMapValue7316)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeFloat64(float64(x.Min))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7316)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeFloat64(float64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey7316)
				r.EncodeString(codecSelferC_UTF87316, string("m"))
				z.EncSendContainerState(codecSelfer_containerMapValue7316)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeFloat64(float64(x.Max))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7316)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeFloat64(float64(x.Sum))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey7316)
				r.EncodeString(codecSelferC_UTF87316, string("s"))
				z.EncSendContainerState(codecSelfer_containerMapValue7316)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeFloat64(float64(x.Sum))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7316)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeFloat64(float64(x.First))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey7316)
				r.EncodeString(codecSelferC_UTF87316, string("f"))
				z.EncSendContainerState(codecSelfer_containerMapValue7316)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeFloat64(float64(x.First))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7316)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeFloat64(float64(x.Last))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey7316)
				r.EncodeString(codecSelferC_UTF87316, string("l"))
				z.EncSendContainerState(codecSelfer_containerMapValue7316)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeFloat64(float64(x.Last))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7316)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeInt(int64(x.Count))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey7316)
				r.EncodeString(codecSelferC_UTF87316, string("c"))
				z.EncSendContainerState(codecSelfer_containerMapValue7316)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeInt(int64(x.Count))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd7316)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd7316)
			}
		}
	}
}

func (x *CodecFullStat) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7316 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd7316)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7316 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr7316)
		}
	}
}

func (x *CodecFullStat) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey7316)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue7316)
		switch yys3 {
		case "t":
			if r.TryDecodeAsNil() {
				x.Time = 0
			} else {
				yyv4 := &x.Time
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "n":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				yyv6 := &x.Min
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*float64)(yyv6)) = float64(r.DecodeFloat(false))
				}
			}
		case "m":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				yyv8 := &x.Max
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*float64)(yyv8)) = float64(r.DecodeFloat(false))
				}
			}
		case "s":
			if r.TryDecodeAsNil() {
				x.Sum = 0
			} else {
				yyv10 := &x.Sum
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*float64)(yyv10)) = float64(r.DecodeFloat(false))
				}
			}
		case "f":
			if r.TryDecodeAsNil() {
				x.First = 0
			} else {
				yyv12 := &x.First
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*float64)(yyv12)) = float64(r.DecodeFloat(false))
				}
			}
		case "l":
			if r.TryDecodeAsNil() {
				x.Last = 0
			} else {
				yyv14 := &x.Last
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*float64)(yyv14)) = float64(r.DecodeFloat(false))
				}
			}
		case "c":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				yyv16 := &x.Count
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*int64)(yyv16)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd7316)
}

func (x *CodecFullStat) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7316)
	if r.TryDecodeAsNil() {
		x.Time = 0
	} else {
		yyv19 := &x.Time
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*int64)(yyv19)) = int64(r.DecodeInt(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7316)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		yyv21 := &x.Min
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*float64)(yyv21)) = float64(r.DecodeFloat(false))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7316)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		yyv23 := &x.Max
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*float64)(yyv23)) = float64(r.DecodeFloat(false))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7316)
	if r.TryDecodeAsNil() {
		x.Sum = 0
	} else {
		yyv25 := &x.Sum
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*float64)(yyv25)) = float64(r.DecodeFloat(false))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7316)
	if r.TryDecodeAsNil() {
		x.First = 0
	} else {
		yyv27 := &x.First
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*float64)(yyv27)) = float64(r.DecodeFloat(false))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7316)
	if r.TryDecodeAsNil() {
		x.Last = 0
	} else {
		yyv29 := &x.Last
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*float64)(yyv29)) = float64(r.DecodeFloat(false))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7316)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		yyv31 := &x.Count
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*int64)(yyv31)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem7316)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
}

func (x *CodecStatSmall) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7316)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.Time))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey7316)
				r.EncodeString(codecSelferC_UTF87316, string("t"))
				z.EncSendContainerState(codecSelfer_containerMapValue7316)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.Time))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7316)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeFloat64(float64(x.Val))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey7316)
				r.EncodeString(codecSelferC_UTF87316, string("v"))
				z.EncSendContainerState(codecSelfer_containerMapValue7316)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeFloat64(float64(x.Val))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd7316)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd7316)
			}
		}
	}
}

func (x *CodecStatSmall) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7316 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd7316)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7316 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr7316)
		}
	}
}

func (x *CodecStatSmall) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey7316)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue7316)
		switch yys3 {
		case "t":
			if r.TryDecodeAsNil() {
				x.Time = 0
			} else {
				yyv4 := &x.Time
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "v":
			if r.TryDecodeAsNil() {
				x.Val = 0
			} else {
				yyv6 := &x.Val
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*float64)(yyv6)) = float64(r.DecodeFloat(false))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd7316)
}

func (x *CodecStatSmall) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7316)
	if r.TryDecodeAsNil() {
		x.Time = 0
	} else {
		yyv9 := &x.Time
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*int64)(yyv9)) = int64(r.DecodeInt(64))
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7316)
	if r.TryDecodeAsNil() {
		x.Val = 0
	} else {
		yyv11 := &x.Val
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*float64)(yyv11)) = float64(r.DecodeFloat(false))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem7316)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
}

func (x *CodecStat) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7316)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.StatType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey7316)
				r.EncodeString(codecSelferC_UTF87316, string("t"))
				z.EncSendContainerState(codecSelfer_containerMapValue7316)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.StatType))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7316)
				yy7 := &x.Stat
				yy7.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey7316)
				r.EncodeString(codecSelferC_UTF87316, string("s"))
				z.EncSendContainerState(codecSelfer_containerMapValue7316)
				yy9 := &x.Stat
				yy9.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7316)
				yy12 := &x.SmallStat
				yy12.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey7316)
				r.EncodeString(codecSelferC_UTF87316, string("m"))
				z.EncSendContainerState(codecSelfer_containerMapValue7316)
				yy14 := &x.SmallStat
				yy14.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd7316)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd7316)
			}
		}
	}
}

func (x *CodecStat) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7316 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd7316)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7316 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr7316)
		}
	}
}

func (x *CodecStat) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey7316)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue7316)
		switch yys3 {
		case "t":
			if r.TryDecodeAsNil() {
				x.StatType = false
			} else {
				yyv4 := &x.StatType
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "s":
			if r.TryDecodeAsNil() {
				x.Stat = CodecFullStat{}
			} else {
				yyv6 := &x.Stat
				yyv6.CodecDecodeSelf(d)
			}
		case "m":
			if r.TryDecodeAsNil() {
				x.SmallStat = CodecStatSmall{}
			} else {
				yyv7 := &x.SmallStat
				yyv7.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd7316)
}

func (x *CodecStat) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7316)
	if r.TryDecodeAsNil() {
		x.StatType = false
	} else {
		yyv9 := &x.StatType
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*bool)(yyv9)) = r.DecodeBool()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7316)
	if r.TryDecodeAsNil() {
		x.Stat = CodecFullStat{}
	} else {
		yyv11 := &x.Stat
		yyv11.CodecDecodeSelf(d)
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7316)
	if r.TryDecodeAsNil() {
		x.SmallStat = CodecStatSmall{}
	} else {
		yyv12 := &x.SmallStat
		yyv12.CodecDecodeSelf(d)
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem7316)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
}

func (x *CodecStats) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7316)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.FullTimeResolution))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey7316)
				r.EncodeString(codecSelferC_UTF87316, string("r"))
				z.EncSendContainerState(codecSelfer_containerMapValue7316)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.FullTimeResolution))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem7316)
				if x.Stats == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encSliceCodecStat(([]CodecStat)(x.Stats), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey7316)
				r.EncodeString(codecSelferC_UTF87316, string("s"))
				z.EncSendContainerState(codecSelfer_containerMapValue7316)
				if x.Stats == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encSliceCodecStat(([]CodecStat)(x.Stats), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd7316)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd7316)
			}
		}
	}
}

func (x *CodecStats) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap7316 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd7316)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray7316 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr7316)
		}
	}
}

func (x *CodecStats) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey7316)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue7316)
		switch yys3 {
		case "r":
			if r.TryDecodeAsNil() {
				x.FullTimeResolution = false
			} else {
				yyv4 := &x.FullTimeResolution
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "s":
			if r.TryDecodeAsNil() {
				x.Stats = nil
			} else {
				yyv6 := &x.Stats
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					h.decSliceCodecStat((*[]CodecStat)(yyv6), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd7316)
}

func (x *CodecStats) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7316)
	if r.TryDecodeAsNil() {
		x.FullTimeResolution = false
	} else {
		yyv9 := &x.FullTimeResolution
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*bool)(yyv9)) = r.DecodeBool()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem7316)
	if r.TryDecodeAsNil() {
		x.Stats = nil
	} else {
		yyv11 := &x.Stats
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			h.decSliceCodecStat((*[]CodecStat)(yyv11), d)
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem7316)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd7316)
}

func (x codecSelfer7316) encSliceCodecStat(v []CodecStat, e *codec1978.Encoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem7316)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd7316)
}

func (x codecSelfer7316) decSliceCodecStat(v *[]CodecStat, d *codec1978.Decoder) {
	var h codecSelfer7316
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []CodecStat{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]CodecStat, yyrl1)
				}
			} else {
				yyv1 = make([]CodecStat, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = CodecStat{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, CodecStat{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = CodecStat{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, CodecStat{}) // var yyz1 CodecStat
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = CodecStat{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []CodecStat{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
