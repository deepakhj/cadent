// Code generated by protoc-gen-gogo.
// source: series.proto
// DO NOT EDIT!

/*
	Package schemas is a generated protocol buffer package.

	It is generated from these files:
		series.proto

	It has these top-level messages:
		MetricTag
		MetricName
		MetricValue
		SeriesMetric
		SingleMetric
		UnProcessedMetric
		RawMetric
*/
package schemas

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MetricTag struct {
	Tag []string `protobuf:"bytes,1,rep,name=tag" json:"tag,omitempty"`
}

func (m *MetricTag) Reset()                    { *m = MetricTag{} }
func (m *MetricTag) String() string            { return proto.CompactTextString(m) }
func (*MetricTag) ProtoMessage()               {}
func (*MetricTag) Descriptor() ([]byte, []int) { return fileDescriptorSeries, []int{0} }

func (m *MetricTag) GetTag() []string {
	if m != nil {
		return m.Tag
	}
	return nil
}

type MetricName struct {
	Metric   string       `protobuf:"bytes,1,req,name=metric" json:"metric"`
	Id       uint64       `protobuf:"varint,2,opt,name=id" json:"id"`
	Uid      string       `protobuf:"bytes,3,opt,name=uid" json:"uid"`
	Tags     []*MetricTag `protobuf:"bytes,13,rep,name=tags" json:"tags,omitempty"`
	MetaTags []*MetricTag `protobuf:"bytes,14,rep,name=meta_tags" json:"meta_tags,omitempty"`
}

func (m *MetricName) Reset()                    { *m = MetricName{} }
func (m *MetricName) String() string            { return proto.CompactTextString(m) }
func (*MetricName) ProtoMessage()               {}
func (*MetricName) Descriptor() ([]byte, []int) { return fileDescriptorSeries, []int{1} }

func (m *MetricName) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *MetricName) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MetricName) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *MetricName) GetTags() []*MetricTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *MetricName) GetMetaTags() []*MetricTag {
	if m != nil {
		return m.MetaTags
	}
	return nil
}

type MetricValue struct {
	Time  int64   `protobuf:"varint,1,req,name=time" json:"time"`
	Min   float64 `protobuf:"fixed64,2,opt,name=min" json:"min"`
	Max   float64 `protobuf:"fixed64,3,opt,name=max" json:"max"`
	Last  float64 `protobuf:"fixed64,4,opt,name=last" json:"last"`
	Sum   float64 `protobuf:"fixed64,5,req,name=sum" json:"sum"`
	Count int64   `protobuf:"varint,6,req,name=count" json:"count"`
}

func (m *MetricValue) Reset()                    { *m = MetricValue{} }
func (m *MetricValue) String() string            { return proto.CompactTextString(m) }
func (*MetricValue) ProtoMessage()               {}
func (*MetricValue) Descriptor() ([]byte, []int) { return fileDescriptorSeries, []int{2} }

func (m *MetricValue) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MetricValue) GetMin() float64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *MetricValue) GetMax() float64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *MetricValue) GetLast() float64 {
	if m != nil {
		return m.Last
	}
	return 0
}

func (m *MetricValue) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *MetricValue) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type SeriesMetric struct {
	Id         uint64       `protobuf:"varint,2,req,name=id" json:"id"`
	Uid        string       `protobuf:"bytes,3,req,name=uid" json:"uid"`
	Time       int64        `protobuf:"varint,4,req,name=time" json:"time"`
	Metric     string       `protobuf:"bytes,5,req,name=metric" json:"metric"`
	Encoding   string       `protobuf:"bytes,6,req,name=encoding" json:"encoding"`
	Data       []byte       `protobuf:"bytes,7,req,name=data" json:"data"`
	Resolution uint32       `protobuf:"varint,8,opt,name=resolution" json:"resolution"`
	Ttl        uint32       `protobuf:"varint,9,opt,name=ttl" json:"ttl"`
	Tags       []*MetricTag `protobuf:"bytes,13,rep,name=tags" json:"tags,omitempty"`
	MetaTags   []*MetricTag `protobuf:"bytes,14,rep,name=meta_tags" json:"meta_tags,omitempty"`
}

func (m *SeriesMetric) Reset()                    { *m = SeriesMetric{} }
func (m *SeriesMetric) String() string            { return proto.CompactTextString(m) }
func (*SeriesMetric) ProtoMessage()               {}
func (*SeriesMetric) Descriptor() ([]byte, []int) { return fileDescriptorSeries, []int{3} }

func (m *SeriesMetric) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SeriesMetric) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *SeriesMetric) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SeriesMetric) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *SeriesMetric) GetEncoding() string {
	if m != nil {
		return m.Encoding
	}
	return ""
}

func (m *SeriesMetric) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SeriesMetric) GetResolution() uint32 {
	if m != nil {
		return m.Resolution
	}
	return 0
}

func (m *SeriesMetric) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *SeriesMetric) GetTags() []*MetricTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SeriesMetric) GetMetaTags() []*MetricTag {
	if m != nil {
		return m.MetaTags
	}
	return nil
}

type SingleMetric struct {
	Id         uint64       `protobuf:"varint,2,req,name=id" json:"id"`
	Uid        string       `protobuf:"bytes,3,req,name=uid" json:"uid"`
	Time       int64        `protobuf:"varint,4,req,name=time" json:"time"`
	Metric     string       `protobuf:"bytes,5,req,name=metric" json:"metric"`
	Min        float64      `protobuf:"fixed64,6,opt,name=min" json:"min"`
	Max        float64      `protobuf:"fixed64,7,opt,name=max" json:"max"`
	Last       float64      `protobuf:"fixed64,8,opt,name=last" json:"last"`
	Sum        float64      `protobuf:"fixed64,9,req,name=sum" json:"sum"`
	Count      int64        `protobuf:"varint,10,req,name=count" json:"count"`
	Resolution uint32       `protobuf:"varint,11,opt,name=resolution" json:"resolution"`
	Ttl        uint32       `protobuf:"varint,12,opt,name=ttl" json:"ttl"`
	Tags       []*MetricTag `protobuf:"bytes,13,rep,name=tags" json:"tags,omitempty"`
	MetaTags   []*MetricTag `protobuf:"bytes,14,rep,name=meta_tags" json:"meta_tags,omitempty"`
}

func (m *SingleMetric) Reset()                    { *m = SingleMetric{} }
func (m *SingleMetric) String() string            { return proto.CompactTextString(m) }
func (*SingleMetric) ProtoMessage()               {}
func (*SingleMetric) Descriptor() ([]byte, []int) { return fileDescriptorSeries, []int{4} }

func (m *SingleMetric) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SingleMetric) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *SingleMetric) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SingleMetric) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *SingleMetric) GetMin() float64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *SingleMetric) GetMax() float64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *SingleMetric) GetLast() float64 {
	if m != nil {
		return m.Last
	}
	return 0
}

func (m *SingleMetric) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *SingleMetric) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SingleMetric) GetResolution() uint32 {
	if m != nil {
		return m.Resolution
	}
	return 0
}

func (m *SingleMetric) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *SingleMetric) GetTags() []*MetricTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SingleMetric) GetMetaTags() []*MetricTag {
	if m != nil {
		return m.MetaTags
	}
	return nil
}

type UnProcessedMetric struct {
	Time     int64        `protobuf:"varint,1,req,name=time" json:"time"`
	Metric   string       `protobuf:"bytes,2,req,name=metric" json:"metric"`
	Min      float64      `protobuf:"fixed64,3,opt,name=min" json:"min"`
	Max      float64      `protobuf:"fixed64,4,opt,name=max" json:"max"`
	Last     float64      `protobuf:"fixed64,5,opt,name=last" json:"last"`
	Sum      float64      `protobuf:"fixed64,6,req,name=sum" json:"sum"`
	Count    int64        `protobuf:"varint,7,req,name=count" json:"count"`
	Tags     []*MetricTag `protobuf:"bytes,13,rep,name=tags" json:"tags,omitempty"`
	MetaTags []*MetricTag `protobuf:"bytes,14,rep,name=meta_tags" json:"meta_tags,omitempty"`
}

func (m *UnProcessedMetric) Reset()                    { *m = UnProcessedMetric{} }
func (m *UnProcessedMetric) String() string            { return proto.CompactTextString(m) }
func (*UnProcessedMetric) ProtoMessage()               {}
func (*UnProcessedMetric) Descriptor() ([]byte, []int) { return fileDescriptorSeries, []int{5} }

func (m *UnProcessedMetric) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *UnProcessedMetric) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *UnProcessedMetric) GetMin() float64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *UnProcessedMetric) GetMax() float64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *UnProcessedMetric) GetLast() float64 {
	if m != nil {
		return m.Last
	}
	return 0
}

func (m *UnProcessedMetric) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *UnProcessedMetric) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *UnProcessedMetric) GetTags() []*MetricTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *UnProcessedMetric) GetMetaTags() []*MetricTag {
	if m != nil {
		return m.MetaTags
	}
	return nil
}

type RawMetric struct {
	Time     int64        `protobuf:"varint,1,req,name=time" json:"time"`
	Metric   string       `protobuf:"bytes,2,req,name=metric" json:"metric"`
	Value    float64      `protobuf:"fixed64,3,req,name=value" json:"value"`
	Tags     []*MetricTag `protobuf:"bytes,13,rep,name=tags" json:"tags,omitempty"`
	MetaTags []*MetricTag `protobuf:"bytes,14,rep,name=meta_tags" json:"meta_tags,omitempty"`
}

func (m *RawMetric) Reset()                    { *m = RawMetric{} }
func (m *RawMetric) String() string            { return proto.CompactTextString(m) }
func (*RawMetric) ProtoMessage()               {}
func (*RawMetric) Descriptor() ([]byte, []int) { return fileDescriptorSeries, []int{6} }

func (m *RawMetric) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *RawMetric) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *RawMetric) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *RawMetric) GetTags() []*MetricTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *RawMetric) GetMetaTags() []*MetricTag {
	if m != nil {
		return m.MetaTags
	}
	return nil
}

func init() {
	proto.RegisterType((*MetricTag)(nil), "schemas.MetricTag")
	proto.RegisterType((*MetricName)(nil), "schemas.MetricName")
	proto.RegisterType((*MetricValue)(nil), "schemas.MetricValue")
	proto.RegisterType((*SeriesMetric)(nil), "schemas.SeriesMetric")
	proto.RegisterType((*SingleMetric)(nil), "schemas.SingleMetric")
	proto.RegisterType((*UnProcessedMetric)(nil), "schemas.UnProcessedMetric")
	proto.RegisterType((*RawMetric)(nil), "schemas.RawMetric")
}
func (m *MetricTag) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricTag) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		for _, s := range m.Tag {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *MetricName) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricName) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintSeries(data, i, uint64(len(m.Metric)))
	i += copy(data[i:], m.Metric)
	data[i] = 0x10
	i++
	i = encodeVarintSeries(data, i, uint64(m.Id))
	data[i] = 0x1a
	i++
	i = encodeVarintSeries(data, i, uint64(len(m.Uid)))
	i += copy(data[i:], m.Uid)
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			data[i] = 0x6a
			i++
			i = encodeVarintSeries(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MetaTags) > 0 {
		for _, msg := range m.MetaTags {
			data[i] = 0x72
			i++
			i = encodeVarintSeries(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MetricValue) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricValue) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintSeries(data, i, uint64(m.Time))
	data[i] = 0x11
	i++
	i = encodeFixed64Series(data, i, uint64(math.Float64bits(float64(m.Min))))
	data[i] = 0x19
	i++
	i = encodeFixed64Series(data, i, uint64(math.Float64bits(float64(m.Max))))
	data[i] = 0x21
	i++
	i = encodeFixed64Series(data, i, uint64(math.Float64bits(float64(m.Last))))
	data[i] = 0x29
	i++
	i = encodeFixed64Series(data, i, uint64(math.Float64bits(float64(m.Sum))))
	data[i] = 0x30
	i++
	i = encodeVarintSeries(data, i, uint64(m.Count))
	return i, nil
}

func (m *SeriesMetric) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SeriesMetric) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x10
	i++
	i = encodeVarintSeries(data, i, uint64(m.Id))
	data[i] = 0x1a
	i++
	i = encodeVarintSeries(data, i, uint64(len(m.Uid)))
	i += copy(data[i:], m.Uid)
	data[i] = 0x20
	i++
	i = encodeVarintSeries(data, i, uint64(m.Time))
	data[i] = 0x2a
	i++
	i = encodeVarintSeries(data, i, uint64(len(m.Metric)))
	i += copy(data[i:], m.Metric)
	data[i] = 0x32
	i++
	i = encodeVarintSeries(data, i, uint64(len(m.Encoding)))
	i += copy(data[i:], m.Encoding)
	if m.Data != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintSeries(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	data[i] = 0x40
	i++
	i = encodeVarintSeries(data, i, uint64(m.Resolution))
	data[i] = 0x48
	i++
	i = encodeVarintSeries(data, i, uint64(m.Ttl))
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			data[i] = 0x6a
			i++
			i = encodeVarintSeries(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MetaTags) > 0 {
		for _, msg := range m.MetaTags {
			data[i] = 0x72
			i++
			i = encodeVarintSeries(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SingleMetric) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SingleMetric) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x10
	i++
	i = encodeVarintSeries(data, i, uint64(m.Id))
	data[i] = 0x1a
	i++
	i = encodeVarintSeries(data, i, uint64(len(m.Uid)))
	i += copy(data[i:], m.Uid)
	data[i] = 0x20
	i++
	i = encodeVarintSeries(data, i, uint64(m.Time))
	data[i] = 0x2a
	i++
	i = encodeVarintSeries(data, i, uint64(len(m.Metric)))
	i += copy(data[i:], m.Metric)
	data[i] = 0x31
	i++
	i = encodeFixed64Series(data, i, uint64(math.Float64bits(float64(m.Min))))
	data[i] = 0x39
	i++
	i = encodeFixed64Series(data, i, uint64(math.Float64bits(float64(m.Max))))
	data[i] = 0x41
	i++
	i = encodeFixed64Series(data, i, uint64(math.Float64bits(float64(m.Last))))
	data[i] = 0x49
	i++
	i = encodeFixed64Series(data, i, uint64(math.Float64bits(float64(m.Sum))))
	data[i] = 0x50
	i++
	i = encodeVarintSeries(data, i, uint64(m.Count))
	data[i] = 0x58
	i++
	i = encodeVarintSeries(data, i, uint64(m.Resolution))
	data[i] = 0x60
	i++
	i = encodeVarintSeries(data, i, uint64(m.Ttl))
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			data[i] = 0x6a
			i++
			i = encodeVarintSeries(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MetaTags) > 0 {
		for _, msg := range m.MetaTags {
			data[i] = 0x72
			i++
			i = encodeVarintSeries(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UnProcessedMetric) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UnProcessedMetric) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintSeries(data, i, uint64(m.Time))
	data[i] = 0x12
	i++
	i = encodeVarintSeries(data, i, uint64(len(m.Metric)))
	i += copy(data[i:], m.Metric)
	data[i] = 0x19
	i++
	i = encodeFixed64Series(data, i, uint64(math.Float64bits(float64(m.Min))))
	data[i] = 0x21
	i++
	i = encodeFixed64Series(data, i, uint64(math.Float64bits(float64(m.Max))))
	data[i] = 0x29
	i++
	i = encodeFixed64Series(data, i, uint64(math.Float64bits(float64(m.Last))))
	data[i] = 0x31
	i++
	i = encodeFixed64Series(data, i, uint64(math.Float64bits(float64(m.Sum))))
	data[i] = 0x38
	i++
	i = encodeVarintSeries(data, i, uint64(m.Count))
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			data[i] = 0x6a
			i++
			i = encodeVarintSeries(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MetaTags) > 0 {
		for _, msg := range m.MetaTags {
			data[i] = 0x72
			i++
			i = encodeVarintSeries(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawMetric) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RawMetric) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintSeries(data, i, uint64(m.Time))
	data[i] = 0x12
	i++
	i = encodeVarintSeries(data, i, uint64(len(m.Metric)))
	i += copy(data[i:], m.Metric)
	data[i] = 0x19
	i++
	i = encodeFixed64Series(data, i, uint64(math.Float64bits(float64(m.Value))))
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			data[i] = 0x6a
			i++
			i = encodeVarintSeries(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MetaTags) > 0 {
		for _, msg := range m.MetaTags {
			data[i] = 0x72
			i++
			i = encodeVarintSeries(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Series(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Series(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSeries(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *MetricTag) Size() (n int) {
	var l int
	_ = l
	if len(m.Tag) > 0 {
		for _, s := range m.Tag {
			l = len(s)
			n += 1 + l + sovSeries(uint64(l))
		}
	}
	return n
}

func (m *MetricName) Size() (n int) {
	var l int
	_ = l
	l = len(m.Metric)
	n += 1 + l + sovSeries(uint64(l))
	n += 1 + sovSeries(uint64(m.Id))
	l = len(m.Uid)
	n += 1 + l + sovSeries(uint64(l))
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovSeries(uint64(l))
		}
	}
	if len(m.MetaTags) > 0 {
		for _, e := range m.MetaTags {
			l = e.Size()
			n += 1 + l + sovSeries(uint64(l))
		}
	}
	return n
}

func (m *MetricValue) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSeries(uint64(m.Time))
	n += 9
	n += 9
	n += 9
	n += 9
	n += 1 + sovSeries(uint64(m.Count))
	return n
}

func (m *SeriesMetric) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSeries(uint64(m.Id))
	l = len(m.Uid)
	n += 1 + l + sovSeries(uint64(l))
	n += 1 + sovSeries(uint64(m.Time))
	l = len(m.Metric)
	n += 1 + l + sovSeries(uint64(l))
	l = len(m.Encoding)
	n += 1 + l + sovSeries(uint64(l))
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovSeries(uint64(l))
	}
	n += 1 + sovSeries(uint64(m.Resolution))
	n += 1 + sovSeries(uint64(m.Ttl))
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovSeries(uint64(l))
		}
	}
	if len(m.MetaTags) > 0 {
		for _, e := range m.MetaTags {
			l = e.Size()
			n += 1 + l + sovSeries(uint64(l))
		}
	}
	return n
}

func (m *SingleMetric) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSeries(uint64(m.Id))
	l = len(m.Uid)
	n += 1 + l + sovSeries(uint64(l))
	n += 1 + sovSeries(uint64(m.Time))
	l = len(m.Metric)
	n += 1 + l + sovSeries(uint64(l))
	n += 9
	n += 9
	n += 9
	n += 9
	n += 1 + sovSeries(uint64(m.Count))
	n += 1 + sovSeries(uint64(m.Resolution))
	n += 1 + sovSeries(uint64(m.Ttl))
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovSeries(uint64(l))
		}
	}
	if len(m.MetaTags) > 0 {
		for _, e := range m.MetaTags {
			l = e.Size()
			n += 1 + l + sovSeries(uint64(l))
		}
	}
	return n
}

func (m *UnProcessedMetric) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSeries(uint64(m.Time))
	l = len(m.Metric)
	n += 1 + l + sovSeries(uint64(l))
	n += 9
	n += 9
	n += 9
	n += 9
	n += 1 + sovSeries(uint64(m.Count))
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovSeries(uint64(l))
		}
	}
	if len(m.MetaTags) > 0 {
		for _, e := range m.MetaTags {
			l = e.Size()
			n += 1 + l + sovSeries(uint64(l))
		}
	}
	return n
}

func (m *RawMetric) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSeries(uint64(m.Time))
	l = len(m.Metric)
	n += 1 + l + sovSeries(uint64(l))
	n += 9
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovSeries(uint64(l))
		}
	}
	if len(m.MetaTags) > 0 {
		for _, e := range m.MetaTags {
			l = e.Size()
			n += 1 + l + sovSeries(uint64(l))
		}
	}
	return n
}

func sovSeries(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSeries(x uint64) (n int) {
	return sovSeries(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetricTag) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = append(m.Tag, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeries(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricName) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &MetricTag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaTags = append(m.MetaTags, &MetricTag{})
			if err := m.MetaTags[len(m.MetaTags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeries(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("metric")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricValue) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Min = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Max = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Last = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Sum = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000002)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipSeries(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("time")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("sum")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("count")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeriesMetric) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeriesMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeriesMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encoding = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], data[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolution", wireType)
			}
			m.Resolution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Resolution |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Ttl |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &MetricTag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaTags = append(m.MetaTags, &MetricTag{})
			if err := m.MetaTags[len(m.MetaTags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeries(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("uid")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("time")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("metric")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("encoding")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("data")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleMetric) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Min = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Max = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Last = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Sum = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000010)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolution", wireType)
			}
			m.Resolution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Resolution |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Ttl |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &MetricTag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaTags = append(m.MetaTags, &MetricTag{})
			if err := m.MetaTags[len(m.MetaTags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeries(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("uid")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("time")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("metric")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("sum")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("count")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnProcessedMetric) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnProcessedMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnProcessedMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Min = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Max = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Last = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Sum = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &MetricTag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaTags = append(m.MetaTags, &MetricTag{})
			if err := m.MetaTags[len(m.MetaTags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeries(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("time")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("metric")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("sum")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("count")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawMetric) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Value = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &MetricTag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaTags = append(m.MetaTags, &MetricTag{})
			if err := m.MetaTags[len(m.MetaTags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeries(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("time")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("metric")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("value")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSeries(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSeries
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSeries
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSeries
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSeries
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSeries(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSeries = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSeries   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("series.proto", fileDescriptorSeries) }

var fileDescriptorSeries = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x93, 0x4f, 0x4e, 0xdb, 0x40,
	0x14, 0xc6, 0x33, 0xfe, 0x1b, 0x3f, 0x3b, 0x55, 0xe2, 0x56, 0xd5, 0xac, 0xd2, 0xc8, 0x52, 0xa5,
	0xac, 0xb2, 0xe8, 0x11, 0xb2, 0x6f, 0x55, 0xb5, 0xc0, 0x16, 0x8d, 0xec, 0x51, 0xb0, 0xe4, 0x3f,
	0xc8, 0x33, 0x06, 0xf6, 0x5c, 0x20, 0x12, 0x67, 0xe1, 0x0e, 0x59, 0x72, 0x02, 0x84, 0x60, 0xc3,
	0x2d, 0xe0, 0x31, 0xb1, 0xb1, 0x23, 0x9b, 0x05, 0x52, 0xb2, 0x98, 0xc5, 0x7c, 0xf3, 0xfc, 0xbe,
	0x6f, 0x7e, 0x6f, 0x0c, 0x9e, 0xe0, 0x45, 0xcc, 0xc5, 0xe2, 0xbc, 0xc8, 0x65, 0xee, 0xdb, 0x22,
	0x3c, 0xe3, 0x29, 0x13, 0x01, 0x05, 0xe7, 0x37, 0x97, 0x45, 0x1c, 0x1e, 0xb1, 0x95, 0xef, 0x82,
	0x2e, 0xd9, 0x8a, 0x92, 0x99, 0x3e, 0x77, 0x82, 0x35, 0x01, 0xd8, 0x1e, 0xfd, 0x61, 0x29, 0xf7,
	0xbf, 0x81, 0x95, 0xaa, 0x1d, 0x1e, 0x6b, 0x73, 0x67, 0x69, 0x6c, 0xee, 0x7f, 0x0c, 0xfc, 0x31,
	0x68, 0x71, 0x44, 0xb5, 0x19, 0x99, 0x1b, 0x95, 0x32, 0x01, 0xbd, 0x44, 0x49, 0x47, 0xa9, 0x2e,
	0x9a, 0x81, 0x81, 0x6d, 0x05, 0x1d, 0x61, 0x5f, 0xf7, 0x97, 0xbf, 0xa8, 0xbc, 0x17, 0x8d, 0xf1,
	0x4f, 0x70, 0xb0, 0x39, 0x3b, 0x55, 0x65, 0x5f, 0x3e, 0x2a, 0x0b, 0xae, 0x09, 0xb8, 0xdb, 0xdd,
	0x09, 0x4b, 0x4a, 0xee, 0xfb, 0xd8, 0x38, 0x4e, 0xb9, 0x4a, 0xa4, 0x37, 0xfe, 0x69, 0x9c, 0xa9,
	0x48, 0xa4, 0x25, 0xb1, 0x2b, 0x15, 0xa9, 0x96, 0xf0, 0xcb, 0x84, 0x09, 0x49, 0x8d, 0xdd, 0x32,
	0x51, 0xa6, 0xd4, 0xc4, 0x66, 0xb5, 0xf4, 0x15, 0xcc, 0x30, 0x2f, 0x33, 0x49, 0xad, 0xc6, 0x21,
	0x78, 0x21, 0xe0, 0xfd, 0x57, 0x30, 0xb7, 0x59, 0xde, 0x21, 0x68, 0x5d, 0x08, 0x0d, 0xa9, 0x3a,
	0xab, 0xd1, 0xca, 0xda, 0x30, 0x35, 0x5b, 0x95, 0xdf, 0x61, 0xc8, 0xb3, 0x30, 0x8f, 0xe2, 0x6c,
	0xa5, 0x7c, 0x5b, 0x1d, 0x22, 0x26, 0x19, 0xb5, 0x51, 0xf3, 0x2a, 0x8d, 0x02, 0x14, 0x5c, 0xe4,
	0x49, 0x29, 0xe3, 0x3c, 0xa3, 0x43, 0xbc, 0xcd, 0xa8, 0x89, 0x20, 0x65, 0x42, 0x9d, 0x96, 0xb4,
	0xb7, 0x39, 0xdc, 0x6a, 0x48, 0x00, 0xe3, 0x25, 0xfc, 0x30, 0x04, 0xaa, 0x19, 0x5a, 0xdd, 0x19,
	0xda, 0x3d, 0x33, 0x1c, 0x76, 0x67, 0xe8, 0xf4, 0xcd, 0x10, 0x5a, 0xbe, 0xbb, 0xdc, 0xdc, 0x2e,
	0x37, 0xef, 0x10, 0xdc, 0x9e, 0x09, 0x4c, 0x8e, 0xb3, 0xbf, 0x45, 0x1e, 0x72, 0x21, 0x78, 0x54,
	0xc1, 0xeb, 0x7b, 0xc5, 0x0d, 0x17, 0xad, 0xcb, 0x45, 0xef, 0x72, 0x31, 0x7a, 0xb8, 0x98, 0x5d,
	0x2e, 0x56, 0x1f, 0x17, 0xbb, 0xe5, 0xbb, 0xb7, 0xab, 0xde, 0x10, 0x70, 0xfe, 0xb1, 0xcb, 0x4f,
	0x5f, 0x11, 0x53, 0x5d, 0xbc, 0xfd, 0xdb, 0xea, 0xe5, 0x90, 0x3d, 0xa7, 0x5a, 0x8e, 0x37, 0x8f,
	0x53, 0x72, 0x87, 0xeb, 0x01, 0xd7, 0xfa, 0x69, 0x3a, 0x78, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x26,
	0xe7, 0xbb, 0xbb, 0x17, 0x05, 0x00, 0x00,
}
